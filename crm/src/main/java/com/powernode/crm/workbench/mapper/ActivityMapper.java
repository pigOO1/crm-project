package com.powernode.crm.workbench.mapper;

import com.powernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;


public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Sep 03 10:40:48 CST 2023
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Sep 03 10:40:48 CST 2023
     */
    int insertSelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Sep 03 10:40:48 CST 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Sep 03 10:40:48 CST 2023
     */
    int updateByPrimaryKeySelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Sep 03 10:40:48 CST 2023
     */
    int updateByPrimaryKey(Activity row);

    /**
     * 保存市场活动信息
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 查询所有符合条件的记录条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据id数组批量删除activity
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 更新用户
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有的市场活动
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据ids查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectXzActivities(String[] ids);

    /**
     * 批量插入市场活动
     * @param activities
     * @return
     */
    int insertActivitiesByList(List<Activity> activities);

    /**
     * 查询市场活动详情
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询市场活动详情
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据市场活动的name模糊查询市场活动，并且排除掉已经关联过的clue
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 批量根据ids查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 根据市场活动name和clueId模糊查询
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);

    /**
     * 根据name模糊查询市场活动
     * @param name
     * @return
     */
    List<Activity> selectActivityByName(String name);
}